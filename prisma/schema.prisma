// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String  
  content   String?  @db.Text
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

 enum Role {
   USER
   CREATOR
   ADMIN
 }

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  gh_app_access_token String? @db.Text
  gh_app_refresh_token String? @db.Text
  gh_app_access_token_expires_at DateTime?
  gh_app_refresh_token_expires_at DateTime?
  gh_installation_ids String[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts       Post[]
  role Role @default(USER)
  uploadedRepos Repo[]
  paymentGatewayAccountId String?
  paymentGatewayAccountOnBoarded Boolean @default(false)
  learningRepos Repo[] @relation("StudentRepo")
  requestedRepos Repo[] @relation("RequestRepo")
  buys Buyer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Repo {
  id String @id @default(cuid())
  title String
  url String
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String
  students User[] @relation("StudentRepo")
  requesters User[] @relation("RequestRepo")
  repoOrg String?
  buyers Buyer[]  
  cost Int @default(0)
}

model Buyer {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  repo Repo @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repoId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId String?
  order Order? 
}

model Order {
  id String @id @default(cuid())
  buyerId String @unique
  orderId String @unique
  amount Float
  currency String
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  buyer Buyer @relation(fields: [buyerId], references: [id])
  payments Payment[]
}

model Payment {
  id String @id @default(cuid())
  paymentId String @unique
  orderId String
  amount Float
  currency String
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order Order @relation(fields: [orderId], references: [id])
}
